{
  "contractName": "ERC721Proxy",
  "abi": [
    {
      "constant": false,
      "inputs": [
        {
          "name": "target",
          "type": "address"
        }
      ],
      "name": "addAuthorizedAddress",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "authorities",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "target",
          "type": "address"
        }
      ],
      "name": "removeAuthorizedAddress",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "target",
          "type": "address"
        },
        {
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "removeAuthorizedAddressAtIndex",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "name": "authorized",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getAuthorizedAddresses",
      "outputs": [
        {
          "name": "",
          "type": "address[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "fallback"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "target",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "AuthorizedAddressAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "target",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "AuthorizedAddressRemoved",
      "type": "event"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getProxyId",
      "outputs": [
        {
          "name": "",
          "type": "bytes4"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "bytecode": "0x608060405260008054600160a060020a03191633179055610c0d806100256000396000f3fe6080604052600436106100985763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166342f1181e8114610229578063494503d41461025e57806370712939146102a45780638da5cb5b146102d75780639ad26744146102ec578063ae25532e14610325578063b91816111461036c578063d39de6e9146103b3578063f2fde38b14610418575b3480156100a457600080fd5b507bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19600035167fa85e59e4000000000000000000000000000000000000000000000000000000008114156102245760408051338152600160208201529081205415156101485760e560020a62461bcd0260005260e560020a6020527c1553454e4445525f4e4f545f415554484f52495a454400000000000000604052600060605260646000fd5b600160643503156101945760e560020a62461bcd0260005260e560020a6020527c0e494e56414c49445f414d4f554e540000000000000000000000000000604052600060605260646000fd5b7f23b872dd000000000000000000000000000000000000000000000000000000006000526040602460043760043560206048820160443760288101356000806064600080855af180156101e357005b60e560020a62461bcd0260005260e560020a6020527c0f5452414e534645525f4641494c454400000000000000000000000000604052600060605260646000fd5b600080fd5b34801561023557600080fd5b5061025c6004803603602081101561024c57600080fd5b5035600160a060020a031661044b565b005b34801561026a57600080fd5b506102886004803603602081101561028157600080fd5b50356105a7565b60408051600160a060020a039092168252519081900360200190f35b3480156102b057600080fd5b5061025c600480360360208110156102c757600080fd5b5035600160a060020a03166105cf565b3480156102e357600080fd5b506102886107b9565b3480156102f857600080fd5b5061025c6004803603604081101561030f57600080fd5b50600160a060020a0381351690602001356107c8565b34801561033157600080fd5b5061033a610a42565b604080517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff199092168252519081900360200190f35b34801561037857600080fd5b5061039f6004803603602081101561038f57600080fd5b5035600160a060020a0316610a78565b604080519115158252519081900360200190f35b3480156103bf57600080fd5b506103c8610a8d565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156104045781810151838201526020016103ec565b505050509050019250505060405180910390f35b34801561042457600080fd5b5061025c6004803603602081101561043b57600080fd5b5035600160a060020a0316610aef565b600054600160a060020a0316331461049b576040805160e560020a62461bcd0281526020600482015260136024820152600080516020610bc2833981519152604482015290519081900360640190fd5b600160a060020a03811660009081526001602052604090205460ff161561050c576040805160e560020a62461bcd02815260206004820152601960248201527f5441524745545f414c52454144595f415554484f52495a454400000000000000604482015290519081900360640190fd5b600160a060020a0381166000818152600160208190526040808320805460ff19168317905560028054928301815583527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace909101805473ffffffffffffffffffffffffffffffffffffffff191684179055513392917f3147867c59d17e8fa9d522465651d44aae0a9e38f902f3475b97e58072f0ed4c91a350565b60028054829081106105b557fe5b600091825260209091200154600160a060020a0316905081565b600054600160a060020a0316331461061f576040805160e560020a62461bcd0281526020600482015260136024820152600080516020610bc2833981519152604482015290519081900360640190fd5b600160a060020a03811660009081526001602052604090205460ff161515610691576040805160e560020a62461bcd02815260206004820152601560248201527f5441524745545f4e4f545f415554484f52495a45440000000000000000000000604482015290519081900360640190fd5b600160a060020a0381166000908152600160205260408120805460ff191690555b60025481101561077f5781600160a060020a03166002828154811015156106d557fe5b600091825260209091200154600160a060020a031614156107775760028054600019810190811061070257fe5b60009182526020909120015460028054600160a060020a03909216918390811061072857fe5b6000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790556002805460001901906107719082610b7a565b5061077f565b6001016106b2565b506040513390600160a060020a038316907f1f32c1b084e2de0713b8fb16bd46bb9df710a3dbeae2f3ca93af46e016dcc6b090600090a350565b600054600160a060020a031681565b600054600160a060020a03163314610818576040805160e560020a62461bcd0281526020600482015260136024820152600080516020610bc2833981519152604482015290519081900360640190fd5b600160a060020a03821660009081526001602052604090205460ff16151561088a576040805160e560020a62461bcd02815260206004820152601560248201527f5441524745545f4e4f545f415554484f52495a45440000000000000000000000604482015290519081900360640190fd5b60025481106108e3576040805160e560020a62461bcd02815260206004820152601360248201527f494e4445585f4f55545f4f465f424f554e445300000000000000000000000000604482015290519081900360640190fd5b81600160a060020a03166002828154811015156108fc57fe5b600091825260209091200154600160a060020a031614610966576040805160e560020a62461bcd02815260206004820152601b60248201527f415554484f52495a45445f414444524553535f4d49534d415443480000000000604482015290519081900360640190fd5b600160a060020a0382166000908152600160205260409020805460ff1916905560028054600019810190811061099857fe5b60009182526020909120015460028054600160a060020a0390921691839081106109be57fe5b6000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055600280546000190190610a079082610b7a565b506040513390600160a060020a038416907f1f32c1b084e2de0713b8fb16bd46bb9df710a3dbeae2f3ca93af46e016dcc6b090600090a35050565b604080517f455243373231546f6b656e28616464726573732c75696e7432353629000000008152905190819003601c0190205b90565b60016020526000908152604090205460ff1681565b60606002805480602002602001604051908101604052809291908181526020018280548015610ae557602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311610ac7575b5050505050905090565b600054600160a060020a03163314610b3f576040805160e560020a62461bcd0281526020600482015260136024820152600080516020610bc2833981519152604482015290519081900360640190fd5b600160a060020a03811615610b77576000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b50565b815481835581811115610b9e57600083815260209020610b9e918101908301610ba3565b505050565b610a7591905b80821115610bbd5760008155600101610ba9565b509056fe4f4e4c595f434f4e54524143545f4f574e455200000000000000000000000000a165627a7a72305820e340e76088ef8c8bee24fcccb1d2104462eefbf1f4a92d86393efbf51e4655330029",
  "deployedBytecode": "0x6080604052600436106100985763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166342f1181e8114610229578063494503d41461025e57806370712939146102a45780638da5cb5b146102d75780639ad26744146102ec578063ae25532e14610325578063b91816111461036c578063d39de6e9146103b3578063f2fde38b14610418575b3480156100a457600080fd5b507bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19600035167fa85e59e4000000000000000000000000000000000000000000000000000000008114156102245760408051338152600160208201529081205415156101485760e560020a62461bcd0260005260e560020a6020527c1553454e4445525f4e4f545f415554484f52495a454400000000000000604052600060605260646000fd5b600160643503156101945760e560020a62461bcd0260005260e560020a6020527c0e494e56414c49445f414d4f554e540000000000000000000000000000604052600060605260646000fd5b7f23b872dd000000000000000000000000000000000000000000000000000000006000526040602460043760043560206048820160443760288101356000806064600080855af180156101e357005b60e560020a62461bcd0260005260e560020a6020527c0f5452414e534645525f4641494c454400000000000000000000000000604052600060605260646000fd5b600080fd5b34801561023557600080fd5b5061025c6004803603602081101561024c57600080fd5b5035600160a060020a031661044b565b005b34801561026a57600080fd5b506102886004803603602081101561028157600080fd5b50356105a7565b60408051600160a060020a039092168252519081900360200190f35b3480156102b057600080fd5b5061025c600480360360208110156102c757600080fd5b5035600160a060020a03166105cf565b3480156102e357600080fd5b506102886107b9565b3480156102f857600080fd5b5061025c6004803603604081101561030f57600080fd5b50600160a060020a0381351690602001356107c8565b34801561033157600080fd5b5061033a610a42565b604080517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff199092168252519081900360200190f35b34801561037857600080fd5b5061039f6004803603602081101561038f57600080fd5b5035600160a060020a0316610a78565b604080519115158252519081900360200190f35b3480156103bf57600080fd5b506103c8610a8d565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156104045781810151838201526020016103ec565b505050509050019250505060405180910390f35b34801561042457600080fd5b5061025c6004803603602081101561043b57600080fd5b5035600160a060020a0316610aef565b600054600160a060020a0316331461049b576040805160e560020a62461bcd0281526020600482015260136024820152600080516020610bc2833981519152604482015290519081900360640190fd5b600160a060020a03811660009081526001602052604090205460ff161561050c576040805160e560020a62461bcd02815260206004820152601960248201527f5441524745545f414c52454144595f415554484f52495a454400000000000000604482015290519081900360640190fd5b600160a060020a0381166000818152600160208190526040808320805460ff19168317905560028054928301815583527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace909101805473ffffffffffffffffffffffffffffffffffffffff191684179055513392917f3147867c59d17e8fa9d522465651d44aae0a9e38f902f3475b97e58072f0ed4c91a350565b60028054829081106105b557fe5b600091825260209091200154600160a060020a0316905081565b600054600160a060020a0316331461061f576040805160e560020a62461bcd0281526020600482015260136024820152600080516020610bc2833981519152604482015290519081900360640190fd5b600160a060020a03811660009081526001602052604090205460ff161515610691576040805160e560020a62461bcd02815260206004820152601560248201527f5441524745545f4e4f545f415554484f52495a45440000000000000000000000604482015290519081900360640190fd5b600160a060020a0381166000908152600160205260408120805460ff191690555b60025481101561077f5781600160a060020a03166002828154811015156106d557fe5b600091825260209091200154600160a060020a031614156107775760028054600019810190811061070257fe5b60009182526020909120015460028054600160a060020a03909216918390811061072857fe5b6000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790556002805460001901906107719082610b7a565b5061077f565b6001016106b2565b506040513390600160a060020a038316907f1f32c1b084e2de0713b8fb16bd46bb9df710a3dbeae2f3ca93af46e016dcc6b090600090a350565b600054600160a060020a031681565b600054600160a060020a03163314610818576040805160e560020a62461bcd0281526020600482015260136024820152600080516020610bc2833981519152604482015290519081900360640190fd5b600160a060020a03821660009081526001602052604090205460ff16151561088a576040805160e560020a62461bcd02815260206004820152601560248201527f5441524745545f4e4f545f415554484f52495a45440000000000000000000000604482015290519081900360640190fd5b60025481106108e3576040805160e560020a62461bcd02815260206004820152601360248201527f494e4445585f4f55545f4f465f424f554e445300000000000000000000000000604482015290519081900360640190fd5b81600160a060020a03166002828154811015156108fc57fe5b600091825260209091200154600160a060020a031614610966576040805160e560020a62461bcd02815260206004820152601b60248201527f415554484f52495a45445f414444524553535f4d49534d415443480000000000604482015290519081900360640190fd5b600160a060020a0382166000908152600160205260409020805460ff1916905560028054600019810190811061099857fe5b60009182526020909120015460028054600160a060020a0390921691839081106109be57fe5b6000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055600280546000190190610a079082610b7a565b506040513390600160a060020a038416907f1f32c1b084e2de0713b8fb16bd46bb9df710a3dbeae2f3ca93af46e016dcc6b090600090a35050565b604080517f455243373231546f6b656e28616464726573732c75696e7432353629000000008152905190819003601c0190205b90565b60016020526000908152604090205460ff1681565b60606002805480602002602001604051908101604052809291908181526020018280548015610ae557602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311610ac7575b5050505050905090565b600054600160a060020a03163314610b3f576040805160e560020a62461bcd0281526020600482015260136024820152600080516020610bc2833981519152604482015290519081900360640190fd5b600160a060020a03811615610b77576000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b50565b815481835581811115610b9e57600083815260209020610b9e918101908301610ba3565b505050565b610a7591905b80821115610bbd5760008155600101610ba9565b509056fe4f4e4c595f434f4e54524143545f4f574e455200000000000000000000000000a165627a7a72305820e340e76088ef8c8bee24fcccb1d2104462eefbf1f4a92d86393efbf51e4655330029",
  "sourceMap": "640:7811:4:-;;;161:5:43;:18;;-1:-1:-1;;;;;;161:18:43;169:10;161:18;;;640:7811:4;;;;;;",
  "deployedSourceMap": "640:7811:4:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;640:7811:4;-1:-1:-1;;1031:1:4;1018:15;1014:88;1497:66;1487:8;1484:80;1481:2;;;1793;1787:9;;1831:6;1813:70;;1923:15;1918:2;1907:14;;1900:39;2034:20;;;2028:27;2021:35;2018:2;;;-1:-1:-1;;;;;2154:1:4;2147:77;-1:-1:-1;;;2252:2:4;2245:78;2355:66;2351:2;2344:78;2454:1;2450:2;2443:13;2487:3;2484:1;2477:14;2018:2;5810:1;5804:3;5791:17;5787:25;5784:2;;;-1:-1:-1;;;;;5903:1:4;5896:77;-1:-1:-1;;;6001:2:4;5994:78;6104:66;6100:2;6093:78;6203:1;6199:2;6192:13;6236:3;6233:1;6226:14;5784:2;6534:66;6531:1;6524:77;6813:2;6809;6806:1;6793:23;6953:1;6940:15;7015:2;7010;6993:15;6989:24;6985:2;6972:46;7160:2;7143:15;7139:24;7126:38;7585:1;7525;7470:3;7405:1;7347;7277:5;7222:3;7196:448;7664:7;7661:2;;;7694:12;7661:2;-1:-1:-1;;;;;7807:1:4;7800:77;-1:-1:-1;;;7901:2:4;7894:78;8000:66;7996:2;7989:78;8095:1;8091:2;8084:13;8124:3;8121:1;8114:14;1481:2;8220:1;8217;8210:12;1144:320:5;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1144:320:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1144:320:5;-1:-1:-1;;;;;1144:320:5;;;;;1029:28;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1029:28:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1029:28:5;;;;;;;-1:-1:-1;;;;;1029:28:5;;;;;;;;;;;;;;1578:547;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1578:547:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1578:547:5;-1:-1:-1;;;;;1578:547:5;;;90:20:43;;8:9:-1;5:2;;;30:1;27;20:12;5:2;90:20:43;;;;2298:643:5;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2298:643:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;2298:643:5;;;;;;;;;8336:113:4;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8336:113:4;;;;;;;;-1:-1:-1;;8336:113:4;;;;;;;;;;;;;;980:43:5;;8:9:-1;5:2;;;30:1;27;20:12;5:2;980:43:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;980:43:5;-1:-1:-1;;;;;980:43:5;;;;;;;;;;;;;;;;;;;;;3038:138;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3038:138:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;3038:138:5;;;;;;;;;;;;;;;;;332:167:43;;8:9:-1;5:2;;;30:1;27;20:12;5:2;332:167:43;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;332:167:43;-1:-1:-1;;;;;332:167:43;;;1144:320:5;258:5:43;;-1:-1:-1;;;;;258:5:43;244:10;:19;223:85;;;;;-1:-1:-1;;;;;223:85:43;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;223:85:43;;;;;;;;;;;;;;;-1:-1:-1;;;;;1261:18:5;;;;;;:10;:18;;;;;;;;1260:19;1239:91;;;;;-1:-1:-1;;;;;1239:91:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1341:18:5;;;;;;1362:4;1341:18;;;;;;;;:25;;-1:-1:-1;;1341:25:5;;;;;1376:11;27:10:-1;;23:18;;;45:23;;1376:24:5;;;;;;;;-1:-1:-1;;1376:24:5;;;;;1415:42;1446:10;;1341:18;1415:42;;;1144:320;:::o;1029:28::-;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1029:28:5;;-1:-1:-1;1029:28:5;:::o;1578:547::-;258:5:43;;-1:-1:-1;;;;;258:5:43;244:10;:19;223:85;;;;;-1:-1:-1;;;;;223:85:43;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;223:85:43;;;;;;;;;;;;;;;-1:-1:-1;;;;;1697:18:5;;;;;;:10;:18;;;;;;;;1676:86;;;;;;;-1:-1:-1;;;;;1676:86:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1780:18:5;;;;;;:10;:18;;;;;1773:25;;-1:-1:-1;;1773:25:5;;;1808:252;1832:11;:18;1828:22;;1808:252;;;1893:6;-1:-1:-1;;;;;1875:24:5;:11;1887:1;1875:14;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1875:14:5;:24;1871:179;;;1936:11;1948:18;;-1:-1:-1;;1948:22:5;;;1936:35;;;;;;;;;;;;;;;;1919:11;:14;;-1:-1:-1;;;;;1936:35:5;;;;1931:1;;1919:14;;;;;;;;;;;;;;;:52;;-1:-1:-1;;1919:52:5;-1:-1:-1;;;;;1919:52:5;;;;;;;;;;1989:11;:23;;-1:-1:-1;;1989:23:5;;;;;;:::i;:::-;;2030:5;;1871:179;1852:3;;1808:252;;;-1:-1:-1;2074:44:5;;2107:10;;-1:-1:-1;;;;;2074:44:5;;;;;;;;1578:547;:::o;90:20:43:-;;;-1:-1:-1;;;;;90:20:43;;:::o;2298:643:5:-;258:5:43;;-1:-1:-1;;;;;258:5:43;244:10;:19;223:85;;;;;-1:-1:-1;;;;;223:85:43;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;223:85:43;;;;;;;;;;;;;;;-1:-1:-1;;;;;2461:18:5;;;;;;:10;:18;;;;;;;;2440:86;;;;;;;-1:-1:-1;;;;;2440:86:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;2565:11;:18;2557:26;;2536:92;;;;;-1:-1:-1;;;;;2536:92:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;2681:6;-1:-1:-1;;;;;2659:28:5;:11;2671:5;2659:18;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2659:18:5;:28;2638:102;;;;;-1:-1:-1;;;;;2638:102:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2758:18:5;;;;;;:10;:18;;;;;2751:25;;-1:-1:-1;;2751:25:5;;;2807:11;2819:18;;-1:-1:-1;;2819:22:5;;;2807:35;;;;;;;;;;;;;;;;2786:11;:18;;-1:-1:-1;;;;;2807:35:5;;;;2798:5;;2786:18;;;;;;;;;;;;;;;:56;;-1:-1:-1;;2786:56:5;-1:-1:-1;;;;;2786:56:5;;;;;;;;;;2852:11;:23;;-1:-1:-1;;2852:23:5;;;;;;:::i;:::-;-1:-1:-1;2890:44:5;;2923:10;;-1:-1:-1;;;;;2890:44:5;;;;;;;;2298:643;;:::o;8336:113:4:-;760:41;;;;;;;;;;;;;;;;8336:113;;:::o;980:43:5:-;;;;;;;;;;;;;;;:::o;3038:138::-;3119:16;3158:11;3151:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3151:18:5;;;;;;;;;;;;;;;;;;;;;;;3038:138;:::o;332:167:43:-;258:5;;-1:-1:-1;;;;;258:5:43;244:10;:19;223:85;;;;;-1:-1:-1;;;;;223:85:43;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;223:85:43;;;;;;;;;;;;;;;-1:-1:-1;;;;;428:22:43;;;424:69;;466:5;:16;;-1:-1:-1;;466:16:43;-1:-1:-1;;;;;466:16:43;;;;;424:69;332:167;:::o;640:7811:4:-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;",
  "source": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity 0.5.0;\n\nimport \"./MixinAuthorizable.sol\";\n\n\ncontract ERC721Proxy is\n    MixinAuthorizable\n{\n    // Id of this proxy.\n    bytes4 constant internal PROXY_ID = bytes4(keccak256(\"ERC721Token(address,uint256)\"));\n\n    // solhint-disable-next-line payable-fallback\n    function ()\n        external\n    {\n        assembly {\n            // The first 4 bytes of calldata holds the function selector\n            let selector := and(calldataload(0), 0xffffffff00000000000000000000000000000000000000000000000000000000)\n\n            // `transferFrom` will be called with the following parameters:\n            // assetData Encoded byte array.\n            // from Address to transfer asset from.\n            // to Address to transfer asset to.\n            // amount Amount of asset to transfer.\n            // bytes4(keccak256(\"transferFrom(bytes,address,address,uint256)\")) = 0xa85e59e4\n            if eq(selector, 0xa85e59e400000000000000000000000000000000000000000000000000000000) {\n\n                // To lookup a value in a mapping, we load from the storage location keccak256(k, p),\n                // where k is the key left padded to 32 bytes and p is the storage slot\n                let start := mload(64)\n                mstore(start, and(caller, 0xffffffffffffffffffffffffffffffffffffffff))\n                mstore(add(start, 32), authorized_slot)\n\n                // Revert if authorized[msg.sender] == false\n                if iszero(sload(keccak256(start, 64))) {\n                    // Revert with `Error(\"SENDER_NOT_AUTHORIZED\")`\n                    mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n                    mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\n                    mstore(64, 0x0000001553454e4445525f4e4f545f415554484f52495a454400000000000000)\n                    mstore(96, 0)\n                    revert(0, 100)\n                }\n\n                // `transferFrom`.\n                // The function is marked `external`, so no abi decodeding is done for\n                // us. Instead, we expect the `calldata` memory to contain the\n                // following:\n                //\n                // | Area     | Offset | Length  | Contents                            |\n                // |----------|--------|---------|-------------------------------------|\n                // | Header   | 0      | 4       | function selector                   |\n                // | Params   |        | 4 * 32  | function parameters:                |\n                // |          | 4      |         |   1. offset to assetData (*)        |\n                // |          | 36     |         |   2. from                           |\n                // |          | 68     |         |   3. to                             |\n                // |          | 100    |         |   4. amount                         |\n                // | Data     |        |         | assetData:                          |\n                // |          | 132    | 32      | assetData Length                    |\n                // |          | 164    | **      | assetData Contents                  |\n                //\n                // (*): offset is computed from start of function parameters, so offset\n                //      by an additional 4 bytes in the calldata.\n                //\n                // (**): see table below to compute length of assetData Contents\n                //\n                // WARNING: The ABIv2 specification allows additional padding between\n                //          the Params and Data section. This will result in a larger\n                //          offset to assetData.\n\n                // Asset data itself is encoded as follows:\n                //\n                // | Area     | Offset | Length  | Contents                            |\n                // |----------|--------|---------|-------------------------------------|\n                // | Header   | 0      | 4       | function selector                   |\n                // | Params   |        | 2 * 32  | function parameters:                |\n                // |          | 4      | 12 + 20 |   1. token address                  |\n                // |          | 36     |         |   2. tokenId                        |\n\n                // We construct calldata for the `token.transferFrom` ABI.\n                // The layout of this calldata is in the table below.\n                //\n                // | Area     | Offset | Length  | Contents                            |\n                // |----------|--------|---------|-------------------------------------|\n                // | Header   | 0      | 4       | function selector                   |\n                // | Params   |        | 3 * 32  | function parameters:                |\n                // |          | 4      |         |   1. from                           |\n                // |          | 36     |         |   2. to                             |\n                // |          | 68     |         |   3. tokenId                        |\n\n                // There exists only 1 of each token.\n                // require(amount == 1, \"INVALID_AMOUNT\")\n                if sub(calldataload(100), 1) {\n                    // Revert with `Error(\"INVALID_AMOUNT\")`\n                    mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n                    mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\n                    mstore(64, 0x0000000e494e56414c49445f414d4f554e540000000000000000000000000000)\n                    mstore(96, 0)\n                    revert(0, 100)\n                }\n\n                /////// Setup Header Area ///////\n                // This area holds the 4-byte `transferFrom` selector.\n                // Any trailing data in transferFromSelector will be\n                // overwritten in the next `mstore` call.\n                mstore(0, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\n\n                /////// Setup Params Area ///////\n                // We copy the fields `from` and `to` in bulk\n                // from our own calldata to the new calldata.\n                calldatacopy(4, 36, 64)\n\n                // Copy `tokenId` field from our own calldata to the new calldata.\n                let assetDataOffset := calldataload(4)\n                calldatacopy(68, add(assetDataOffset, 72), 32)\n\n                /////// Call `token.transferFrom` using the calldata ///////\n                let token := calldataload(add(assetDataOffset, 40))\n                let success := call(\n                    gas,            // forward all gas\n                    token,          // call address of token contract\n                    0,              // don't send any ETH\n                    0,              // pointer to start of input\n                    100,            // length of input\n                    0,              // write output to null\n                    0               // output size is 0 bytes\n                )\n                if success {\n                    return(0, 0)\n                }\n\n                // Revert with `Error(\"TRANSFER_FAILED\")`\n                mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n                mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\n                mstore(64, 0x0000000f5452414e534645525f4641494c454400000000000000000000000000)\n                mstore(96, 0)\n                revert(0, 100)\n            }\n\n            // Revert if undefined function is called\n            revert(0, 0)\n        }\n    }\n\n    /// @dev Gets the proxy id associated with the proxy address.\n    /// @return Proxy id.\n    function getProxyId()\n        external\n        pure\n        returns (bytes4)\n    {\n        return PROXY_ID;\n    }\n}\n",
  "sourcePath": "/home/rogelio/Code/dbet/prediction-market/core/contracts/0x/protocol/AssetProxy/ERC721Proxy.sol",
  "ast": {
    "absolutePath": "/home/rogelio/Code/dbet/prediction-market/core/contracts/0x/protocol/AssetProxy/ERC721Proxy.sol",
    "exportedSymbols": {
      "ERC721Proxy": [
        1379
      ]
    },
    "id": 1380,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1355,
        "literals": [
          "solidity",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "580:22:4"
      },
      {
        "absolutePath": "/home/rogelio/Code/dbet/prediction-market/core/contracts/0x/protocol/AssetProxy/MixinAuthorizable.sol",
        "file": "./MixinAuthorizable.sol",
        "id": 1356,
        "nodeType": "ImportDirective",
        "scope": 1380,
        "sourceUnit": 1577,
        "src": "604:33:4",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1357,
              "name": "MixinAuthorizable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1576,
              "src": "668:17:4",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_MixinAuthorizable_$1576",
                "typeString": "contract MixinAuthorizable"
              }
            },
            "id": 1358,
            "nodeType": "InheritanceSpecifier",
            "src": "668:17:4"
          }
        ],
        "contractDependencies": [
          1576,
          1644,
          1696,
          6337,
          6385
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 1379,
        "linearizedBaseContracts": [
          1379,
          1576,
          1696,
          1644,
          6385,
          6337
        ],
        "name": "ERC721Proxy",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": true,
            "id": 1365,
            "name": "PROXY_ID",
            "nodeType": "VariableDeclaration",
            "scope": 1379,
            "src": "717:85:4",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes4",
              "typeString": "bytes4"
            },
            "typeName": {
              "id": 1359,
              "name": "bytes4",
              "nodeType": "ElementaryTypeName",
              "src": "717:6:4",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes4",
                "typeString": "bytes4"
              }
            },
            "value": {
              "argumentTypes": null,
              "arguments": [
                {
                  "argumentTypes": null,
                  "arguments": [
                    {
                      "argumentTypes": null,
                      "hexValue": "455243373231546f6b656e28616464726573732c75696e7432353629",
                      "id": 1362,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "string",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "770:30:4",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_stringliteral_0257179262a09e2dc7b2d43c61f09a5cf1b0c137c8ac216cbe0a97d744c479ed",
                        "typeString": "literal_string \"ERC721Token(address,uint256)\""
                      },
                      "value": "ERC721Token(address,uint256)"
                    }
                  ],
                  "expression": {
                    "argumentTypes": [
                      {
                        "typeIdentifier": "t_stringliteral_0257179262a09e2dc7b2d43c61f09a5cf1b0c137c8ac216cbe0a97d744c479ed",
                        "typeString": "literal_string \"ERC721Token(address,uint256)\""
                      }
                    ],
                    "id": 1361,
                    "name": "keccak256",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 10655,
                    "src": "760:9:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                      "typeString": "function (bytes memory) pure returns (bytes32)"
                    }
                  },
                  "id": 1363,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "functionCall",
                  "lValueRequested": false,
                  "names": [],
                  "nodeType": "FunctionCall",
                  "src": "760:41:4",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  }
                }
              ],
              "expression": {
                "argumentTypes": [
                  {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  }
                ],
                "id": 1360,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "lValueRequested": false,
                "nodeType": "ElementaryTypeNameExpression",
                "src": "753:6:4",
                "typeDescriptions": {
                  "typeIdentifier": "t_type$_t_bytes4_$",
                  "typeString": "type(bytes4)"
                },
                "typeName": "bytes4"
              },
              "id": 1364,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "typeConversion",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "753:49:4",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes4",
                "typeString": "bytes4"
              }
            },
            "visibility": "internal"
          },
          {
            "body": {
              "id": 1369,
              "nodeType": "Block",
              "src": "892:7346:4",
              "statements": [
                {
                  "externalReferences": [
                    {
                      "authorized_slot": {
                        "declaration": 1403,
                        "isOffset": false,
                        "isSlot": true,
                        "src": "1923:15:4",
                        "valueSize": 1
                      }
                    }
                  ],
                  "id": 1368,
                  "nodeType": "InlineAssembly",
                  "operations": "{\n    let selector := and(calldataload(0), 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    if eq(selector, 0xa85e59e400000000000000000000000000000000000000000000000000000000)\n    {\n        let start := mload(64)\n        mstore(start, and(caller(), 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(start, 32), authorized_slot)\n        if iszero(sload(keccak256(start, 64)))\n        {\n            mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n            mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\n            mstore(64, 0x0000001553454e4445525f4e4f545f415554484f52495a454400000000000000)\n            mstore(96, 0)\n            revert(0, 100)\n        }\n        if sub(calldataload(100), 1)\n        {\n            mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n            mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\n            mstore(64, 0x0000000e494e56414c49445f414d4f554e540000000000000000000000000000)\n            mstore(96, 0)\n            revert(0, 100)\n        }\n        mstore(0, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\n        calldatacopy(4, 36, 64)\n        let assetDataOffset := calldataload(4)\n        calldatacopy(68, add(assetDataOffset, 72), 32)\n        let token := calldataload(add(assetDataOffset, 40))\n        let success := call(gas(), token, 0, 0, 100, 0, 0)\n        if success\n        {\n            return(0, 0)\n        }\n        mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n        mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\n        mstore(64, 0x0000000f5452414e534645525f4641494c454400000000000000000000000000)\n        mstore(96, 0)\n        revert(0, 100)\n    }\n    revert(0, 0)\n}",
                  "src": "902:7336:4"
                }
              ]
            },
            "documentation": null,
            "id": 1370,
            "implemented": true,
            "kind": "fallback",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1366,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "868:2:4"
            },
            "returnParameters": {
              "id": 1367,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "892:0:4"
            },
            "scope": 1379,
            "src": "859:7379:4",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 1377,
              "nodeType": "Block",
              "src": "8417:32:4",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1375,
                    "name": "PROXY_ID",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1365,
                    "src": "8434:8:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "functionReturnParameters": 1374,
                  "id": 1376,
                  "nodeType": "Return",
                  "src": "8427:15:4"
                }
              ]
            },
            "documentation": "@dev Gets the proxy id associated with the proxy address.\n @return Proxy id.",
            "id": 1378,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getProxyId",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1371,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8355:2:4"
            },
            "returnParameters": {
              "id": 1374,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1373,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1378,
                  "src": "8405:6:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  },
                  "typeName": {
                    "id": 1372,
                    "name": "bytes4",
                    "nodeType": "ElementaryTypeName",
                    "src": "8405:6:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "8404:8:4"
            },
            "scope": 1379,
            "src": "8336:113:4",
            "stateMutability": "pure",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 1380,
        "src": "640:7811:4"
      }
    ],
    "src": "580:7872:4"
  },
  "legacyAST": {
    "absolutePath": "/home/rogelio/Code/dbet/prediction-market/core/contracts/0x/protocol/AssetProxy/ERC721Proxy.sol",
    "exportedSymbols": {
      "ERC721Proxy": [
        1379
      ]
    },
    "id": 1380,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1355,
        "literals": [
          "solidity",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "580:22:4"
      },
      {
        "absolutePath": "/home/rogelio/Code/dbet/prediction-market/core/contracts/0x/protocol/AssetProxy/MixinAuthorizable.sol",
        "file": "./MixinAuthorizable.sol",
        "id": 1356,
        "nodeType": "ImportDirective",
        "scope": 1380,
        "sourceUnit": 1577,
        "src": "604:33:4",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1357,
              "name": "MixinAuthorizable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1576,
              "src": "668:17:4",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_MixinAuthorizable_$1576",
                "typeString": "contract MixinAuthorizable"
              }
            },
            "id": 1358,
            "nodeType": "InheritanceSpecifier",
            "src": "668:17:4"
          }
        ],
        "contractDependencies": [
          1576,
          1644,
          1696,
          6337,
          6385
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 1379,
        "linearizedBaseContracts": [
          1379,
          1576,
          1696,
          1644,
          6385,
          6337
        ],
        "name": "ERC721Proxy",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": true,
            "id": 1365,
            "name": "PROXY_ID",
            "nodeType": "VariableDeclaration",
            "scope": 1379,
            "src": "717:85:4",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes4",
              "typeString": "bytes4"
            },
            "typeName": {
              "id": 1359,
              "name": "bytes4",
              "nodeType": "ElementaryTypeName",
              "src": "717:6:4",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes4",
                "typeString": "bytes4"
              }
            },
            "value": {
              "argumentTypes": null,
              "arguments": [
                {
                  "argumentTypes": null,
                  "arguments": [
                    {
                      "argumentTypes": null,
                      "hexValue": "455243373231546f6b656e28616464726573732c75696e7432353629",
                      "id": 1362,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "string",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "770:30:4",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_stringliteral_0257179262a09e2dc7b2d43c61f09a5cf1b0c137c8ac216cbe0a97d744c479ed",
                        "typeString": "literal_string \"ERC721Token(address,uint256)\""
                      },
                      "value": "ERC721Token(address,uint256)"
                    }
                  ],
                  "expression": {
                    "argumentTypes": [
                      {
                        "typeIdentifier": "t_stringliteral_0257179262a09e2dc7b2d43c61f09a5cf1b0c137c8ac216cbe0a97d744c479ed",
                        "typeString": "literal_string \"ERC721Token(address,uint256)\""
                      }
                    ],
                    "id": 1361,
                    "name": "keccak256",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 10655,
                    "src": "760:9:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                      "typeString": "function (bytes memory) pure returns (bytes32)"
                    }
                  },
                  "id": 1363,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "functionCall",
                  "lValueRequested": false,
                  "names": [],
                  "nodeType": "FunctionCall",
                  "src": "760:41:4",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  }
                }
              ],
              "expression": {
                "argumentTypes": [
                  {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  }
                ],
                "id": 1360,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "lValueRequested": false,
                "nodeType": "ElementaryTypeNameExpression",
                "src": "753:6:4",
                "typeDescriptions": {
                  "typeIdentifier": "t_type$_t_bytes4_$",
                  "typeString": "type(bytes4)"
                },
                "typeName": "bytes4"
              },
              "id": 1364,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "typeConversion",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "753:49:4",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes4",
                "typeString": "bytes4"
              }
            },
            "visibility": "internal"
          },
          {
            "body": {
              "id": 1369,
              "nodeType": "Block",
              "src": "892:7346:4",
              "statements": [
                {
                  "externalReferences": [
                    {
                      "authorized_slot": {
                        "declaration": 1403,
                        "isOffset": false,
                        "isSlot": true,
                        "src": "1923:15:4",
                        "valueSize": 1
                      }
                    }
                  ],
                  "id": 1368,
                  "nodeType": "InlineAssembly",
                  "operations": "{\n    let selector := and(calldataload(0), 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    if eq(selector, 0xa85e59e400000000000000000000000000000000000000000000000000000000)\n    {\n        let start := mload(64)\n        mstore(start, and(caller(), 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(start, 32), authorized_slot)\n        if iszero(sload(keccak256(start, 64)))\n        {\n            mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n            mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\n            mstore(64, 0x0000001553454e4445525f4e4f545f415554484f52495a454400000000000000)\n            mstore(96, 0)\n            revert(0, 100)\n        }\n        if sub(calldataload(100), 1)\n        {\n            mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n            mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\n            mstore(64, 0x0000000e494e56414c49445f414d4f554e540000000000000000000000000000)\n            mstore(96, 0)\n            revert(0, 100)\n        }\n        mstore(0, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\n        calldatacopy(4, 36, 64)\n        let assetDataOffset := calldataload(4)\n        calldatacopy(68, add(assetDataOffset, 72), 32)\n        let token := calldataload(add(assetDataOffset, 40))\n        let success := call(gas(), token, 0, 0, 100, 0, 0)\n        if success\n        {\n            return(0, 0)\n        }\n        mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n        mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\n        mstore(64, 0x0000000f5452414e534645525f4641494c454400000000000000000000000000)\n        mstore(96, 0)\n        revert(0, 100)\n    }\n    revert(0, 0)\n}",
                  "src": "902:7336:4"
                }
              ]
            },
            "documentation": null,
            "id": 1370,
            "implemented": true,
            "kind": "fallback",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1366,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "868:2:4"
            },
            "returnParameters": {
              "id": 1367,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "892:0:4"
            },
            "scope": 1379,
            "src": "859:7379:4",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 1377,
              "nodeType": "Block",
              "src": "8417:32:4",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1375,
                    "name": "PROXY_ID",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1365,
                    "src": "8434:8:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "functionReturnParameters": 1374,
                  "id": 1376,
                  "nodeType": "Return",
                  "src": "8427:15:4"
                }
              ]
            },
            "documentation": "@dev Gets the proxy id associated with the proxy address.\n @return Proxy id.",
            "id": 1378,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getProxyId",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1371,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8355:2:4"
            },
            "returnParameters": {
              "id": 1374,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1373,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1378,
                  "src": "8405:6:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  },
                  "typeName": {
                    "id": 1372,
                    "name": "bytes4",
                    "nodeType": "ElementaryTypeName",
                    "src": "8405:6:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "8404:8:4"
            },
            "scope": 1379,
            "src": "8336:113:4",
            "stateMutability": "pure",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 1380,
        "src": "640:7811:4"
      }
    ],
    "src": "580:7872:4"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.0+commit.1d4f565a.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.1",
  "updatedAt": "2019-01-31T19:07:12.894Z",
  "devdoc": {
    "methods": {
      "addAuthorizedAddress(address)": {
        "details": "Authorizes an address.",
        "params": {
          "target": "Address to authorize."
        }
      },
      "getAuthorizedAddresses()": {
        "details": "Gets all authorized addresses.",
        "return": "Array of authorized addresses."
      },
      "getProxyId()": {
        "details": "Gets the proxy id associated with the proxy address.",
        "return": "Proxy id."
      },
      "removeAuthorizedAddress(address)": {
        "details": "Removes authorizion of an address.",
        "params": {
          "target": "Address to remove authorization from."
        }
      },
      "removeAuthorizedAddressAtIndex(address,uint256)": {
        "details": "Removes authorizion of an address.",
        "params": {
          "index": "Index of target in authorities array.",
          "target": "Address to remove authorization from."
        }
      }
    }
  },
  "userdoc": {
    "methods": {}
  }
}